---
tags: ragel
cache_breaker: 1
---
This article demonstrates the basic work flow for [[Ragel]] development.

= <tt>simple.rl</tt> =

Start with the simplest code possible, a recognizer for strings of letters (taken from the [[Ragel]] user guide):

<pre>#include <stdio.h>
 
%% machine foo; 

int main(int argc, char **argv) 
{ 
    %% write data noerror nofinal; 
    int cs, res = 0; 
    if (argc > 1)
    {
        char *p = argv[1]; 
        %%{ 
            main := [a-z]+ 0 @{ res = 1; fbreak; };
            write init; 
            write exec noend; 
        }%% 
    } 
    printf("execute = %i\n", res ); 
    return 0; 
}</pre>

= Run `ragel` =

Now run the <tt>ragel</tt> on the file:

<pre lang="shell">$ ragel simple.rl</pre>

= Compile the [[C]] code =

<pre lang="shell">$ gcc simple.c -o simple</pre>

= Run =

A sample session; 0 is printed if no match occurs, 1 is printed on success:

<pre lang="shell">$ ./simple 
execute = 0
$ ./simple foo
execute = 1
$ ./simple fo4
execute = 0</pre>

= See also =

* [[Ragel quickstart (2007)]]: description of workflow using older versions of Ragel
