---
tags: svk
---
I am a big fan of the [[Subversion externals]] feature (also known as [[svn:externals]]). I use it to share code among my projects. It's heavily used by many popular open source projects including, for example, [[Rails]].

The trouble is, [[SVK]], doesn't support externals.

= Nested checkouts =

If you try to "fake" externals support by doing a nested checkout:

<pre>svk co //mirrors/project/trunk src
cd src
svk co //mirrors/other_project/trunk subdir</pre>

You'll fail with an error message like this:

<pre>Overlapping checkout path is not supported (/Users/John/project/src); use 'svk checkout --detach' to remove it first.</pre>

= Views =

It's been [http://lists.bestpractical.com/pipermail/svk-devel/2007-January/000567.html suggested on the mailing lists] that [[SVK]]'s views feature might work but it's [http://bestpractical.typepad.com/worst_impractical/2007/01/svk_20_is_bette.html also noted] that they are a beta-quality feature right now ([[SVK 2.0]]) not recommended for production use.

I also am not entirely sure of how views would be used; I [http://lists.bestpractical.com/pipermail/svk-devel/2007-March/000741.html asked for clarification] on [[svk-devel]] but it's still not clear to me how views are supposed to work as substitutes for [[Subversion externals]].

= Non-nested checkouts =

== Changing nested paths to non-nested paths ==

This will definitely work but unfortunately requires a lot of busy-work to fix breakage caused by the changed relative paths. That is, everything that was formally in <tt>./other_project/</tt> will now be in <tt>../other_project</tt> or <tt>../../other_project</tt>. In the case of [[Xcode]] this can lead to a lot of broken and hard-to-fix file references.

See "[[Search and replace in multiple files with a Perl one-liner]]" for information that may help to ease the pain of such a change.

== Using symbolic links ==

Another alternative is to remove the external and replace it with a symbolic link to the non-nested checkout; for example, in the case of [[WOCommon]]:

<pre>cd $SOURCE_ROOT
svk propdel svn:external .
ln -s ../WOCommon WOCommon</pre>

Along with this change I'm making a minor adjustment to my directory structure. When I originally managed my code using [[CVS]] each project lived in a folder like this:

<pre>project
project/cvs-files
project/non-cvs-files</pre>

Where the trunk or whatever branch was being worked on would be checked out into the <tt>cvs-files</tt> subdirectory.

On migrating to [[Subversion]] this structure changed to:

<pre>project
project/svn-files
project/non-svn-files</pre>

Now that I have yet another migration I'm going to remove the [[SCM]] system's name from the path so that I won't ever have to make this kind of adjustment again:

<pre>project
project/src
project/extra</pre>

== Command-line helper scripts ==

Without proper externals you miss out on the following functionality:

* <tt>svk co</tt> doesn't automatically check out dependent modules the way <tt>svn co</tt> does.
* <tt>svk up</tt> doesn't automatically update dependent modules the way <tt>svn up</tt> does.
* <tt>svk st</tt> doesn't report on changes in dependent modules the way <tt>svn st</tt> does.

One way to work around this would be to write a set of helper scripts, <tt>checkout</tt>, <tt>up</tt> and <tt>st</tt> (<tt>co</tt> can't be used as a name because there is already an [[RCS]] tool with that name), which would serve as a wrapper for <tt>svk</tt> and add the desired "dependency" functionality.

<tt>checkout DEPOTPATH [PATH]</tt> would invoke <tt>svk co DEPOTPATH [PATH]</tt> and then check for any <tt>svk:externals</tt> properties within the checked out path. Declared externals would then be checked out automatically at the appropriate location. <tt>up</tt> would perform similarly, wrapping <tt>svk up</tt>. <tt>st</tt> would wrap <tt>svk st</tt>.

Given the following <tt>svk:externals</tt> property set on a symbolic link <tt>local_name</tt> inside a working copy:

<pre>svk:externals : //mirrors/project/remote_name</pre>

The scripts would expect the symbolic link <tt>local_name</tt> to reveal the real location where <tt>//mirrors/project/remote_name</tt> should be checked out.

This system would require some setup (the symbolic links) but once established would at least afford a level of automation comparable to that provided by [[Subversion externals]].

== Shell tricks ==

It is possible to achieve some level of "automation" by employing some shell tricks.

For example, if you want to find and get status on all checked out instances of a particular external named <tt>WOCommon</tt> on your system you could do:

<pre>svk co --list | grep WOCommon | awk '{print $2}'| xargs -L 1 svk st</pre>

To perform <tt>svk up</tt> on all such externals you could do:

<pre>svk co --list | grep WOCommon | awk '{print $2}'| xargs -L 1 svk up</pre>

This is a brute force way of making sure that changes made to one external get propagated to all others.

= See also =

* Mailing list thread: http://lists.bestpractical.com/pipermail/svk-devel/2007-March/000741.html
* [[Implementing svn:externals support in SVK]]
